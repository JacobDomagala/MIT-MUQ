#ifndef SAMPLINGSTATE_H_
#define SAMPLINGSTATE_H_

#include <iostream>
#include <unordered_map>
#include <vector>

#include <Eigen/Core>
#include <boost/any.hpp>

namespace muq {
  namespace SamplingAlgorithms {
    /// Each state is one sample generated by a sampling algorithm
    /**
       A state could include: the state variables, a weight, the target density evaluation
     */
    class SamplingState {
    public:

      SamplingState() = default;

      SamplingState(Eigen::VectorXd const& stateIn, double weight = 1.0);
      SamplingState(std::vector<Eigen::VectorXd> const& stateIn, double weight = 1.0);

      virtual ~SamplingState() = default;

      /// The state variables
      std::vector<Eigen::VectorXd> state;

      /// The weight of this state
      double weight;

      /// Checks to see if the meta map contains a particular key
      bool HasMeta(std::string const& metaKey);

      /// The total number of parameters in the state, i.e., the sum of state[i].size()
      int TotalDim() const;

      /// A map containing extra information like the target density, run time, forward model output, etc...
      std::unordered_map<std::string, boost::any> meta;

      /** @brief Serialization function for use with Cereal.
          @details This function provides a way to serialize most of the SamplingState
          for use with Cereal and ParCer.  Due to the intracacies of serializing
          the boost::any type, this function does not serialize the meta variable.
      */
      template<class Archive>
      void serialize(Archive & archive)
      {
        archive( state, weight ); // serialize things by passing them to the archive
      }

    };

  } // namespace SamplingAlgoritms
} // namespace muq

#endif
