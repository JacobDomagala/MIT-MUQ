#ifndef SAMPLINGALGORITHM_H_
#define SAMPLINGALGORITHM_H_

#include "MUQ/Utilities/LinearAlgebra/AnyAlgebra.h"

#include "MUQ/Modeling/WorkPiece.h"

#include "MUQ/SamplingAlgorithms/TransitionKernel.h"

namespace muq {
  namespace SamplingAlgorithms {
    
    class SamplingAlgorithm : public muq::Modeling::WorkPiece {
    public:

      SamplingAlgorithm();

      ~SamplingAlgorithm();

      /// Compute the expected first moment
      /**
	 Uses the samples stored in muq::Modeling::WorkPiece::outputs (must have run the sampling algorithm).
	 \return The expected first moment (weighted sum)
       */
      boost::any FirstMoment() const;

      /// Compute the expected first moment
      /**
	 @param[in] samples Samples generated by the sampling algorithm
	 \return The expected first moment (weighted sum)
       */
      boost::any FirstMoment(std::vector<std::shared_ptr<SamplingState> > const& samples) const;

    private:

      /**
	 Inputs:
	 <ol>
	 <li> Parameters for the algorithm
	 <li> The muq::SamplingAlgorithms::SamplingProblem that evaluates/samples the target distribution
	 </ol>
	 @param[in] inputs Inputs to the algorithm
       */
      virtual void EvaluateImpl(muq::Modeling::ref_vector<boost::any> const& inputs) override;

      /// Create the transition kernel
      /**
	 @param[in] pt Parameters for the kernel
	 @param[in] problem The sampling problem that evaluates/samples the distribution we are trying to characterize
	 \return The transition kernel
       */
      virtual std::shared_ptr<TransitionKernel> Kernel(boost::property_tree::ptree& pt, std::shared_ptr<SamplingProblem> problem) const = 0;

      /// A muq::Utilities::AnyAlgebra to do algebra with boost::any's
      std::shared_ptr<muq::Utilities::AnyAlgebra> algebra = std::make_shared<muq::Utilities::AnyAlgebra>();
      
    };
  } // namespace SamplingAlgorithms
} // namespace muq

#endif
